!pip install pytesseract
!apt-get install tesseract-ocr
!apt-get install libtesseract-dev

import cv2
import pytesseract


file_path = 'http://www.digitalsevacsc.in/Admin/ServiceCatgImages/fovjqtui.pan.jpg'

# Load an image from file or capture from a camera
image = cv2.imread(file_path)  # Replace 'car.jpg' with your image file or capture from a camera

# Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian blur to reduce noise
blurred = cv2.GaussianBlur(gray, (5, 5), 0)

# Use Canny edge detection to find edges
edges = cv2.Canny(blurred, 50, 150)

# Find contours in the edges
contours, _ = cv2.findContours(edges.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Filter and sort contours based on area to find the potential plate contour
contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]

plate = None

for contour in contours:
    # Approximate the contour as a polygon
    epsilon = 0.02 * cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, epsilon, True)

    # If the polygon has 4 vertices, it may be a plate
    if len(approx) == 4:
        plate = approx
        break

if plate is not None:
    # Mask the plate region and perform OCR on it
    mask = np.zeros(gray.shape, dtype=np.uint8)
    cv2.drawContours(mask, [plate], -1, 255, -1)
    masked_plate = cv2.bitwise_and(image, image, mask=mask)

    # Extract text from the masked plate using Tesseract OCR
    plate_text = pytesseract.image_to_string(masked_plate, config='--psm 7')

    # Display the detected plate and recognized text
    cv2.imshow('Detected Plate', masked_plate)
    print('License Plate:', plate_text.strip())

    # Wait for a key press and then close the window
    cv2.waitKey(0)
    cv2.destroyAllWindows()
else:
    print('No plate detected.')
